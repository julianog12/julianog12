class GerarArquivo
	require 'open3'
	require '/home/user1/search/lib/canivete.rb'

	def initialize(caminho_config)
			@caminho 							= caminho_config

			@arq_yml               	= YAML::load(File.open(@caminho))
			@nm_arquivo 		= "#{Rails.root}/lib/arquivos_gerados/" + @arq_yml["geral"]["nome_arq_result"] + "_#{Time.now.strftime('%d%m%Y%H%M%S')}"
			@extensao_arquivo    	= (@arq_yml["ambiente"]["extensao_leitura"] == "all" ? "*" : @arq_yml["ambiente"]["extensao_leitura"])
			@cd_empresa          	= @arq_yml["ambiente"]["empresa"]
			@servidor_funcao     	= @arq_yml["geral"]["servidor_http_funcao"]
			@servidor_http       	= @arq_yml["geral"]["servidor_http"]
			@diretorio_listener  	= @arq_yml["ambiente"]["diretorio_listener"]
			@ultimo_diretorio       = @arq_yml["geral"]["ultimo_diretorio"] 


			@data_ultima_alteracao= ler_arquivo_ultima_alteracao(@arq_yml["geral"]["ultima_alteracao"].split(" "))

			gerar_arquivo
			
			processar
	
			#File.delete(@nm_arquivo)


			gravar_arquivo_ultima_alteracao

	end


	def ler_arquivo_ultima_alteracao(data)
		return Time.new(data[0], data[1], data[2], data[3], data[4], data[5])
	end

	def gravar_arquivo_ultima_alteracao
		data  		= Time.now.strftime("%Y %m %d %H %M %S").to_s
		@arq_yml["geral"]["ultima_alteracao"] = data
		File.open(@caminho, "w") {|f| f.write @arq_yml.to_yaml}
	end


	def gerar_arquivo
                Rails.logger.info "AAAQQQ"
		Rails.logger.info "| ls -lt --time-style='+%d%m%Y %H%M' #{@diretorio_listener}/*.#{@extensao_arquivo}"

		f = open("| ls -lt --time-style='+%d%m%Y %H%M' #{@diretorio_listener}/*.#{@extensao_arquivo}")
		a = File.new(@nm_arquivo, "w")
		a.write f.read
		a.close
	end

	def post_funcao(vComponente, vCmd)
		vComando     = vCmd.map { |i| i.to_s }.join("\n")
		vComando     = vComando.force_encoding("UTF-8")
		vTipo        = vCmd[0][0..(vCmd[0].index(/\s/)-1)].to_s
		if vTipo.match(/entry/i)
		 vTipo     = "Local Proc"
		elsif vTipo.match(/operation/i)
			 vTipo     = "Operation"
		else
			 vTipo     = ""
		end
		if (!vTipo.nil? && !vTipo.empty?)
		 vNmFuncao     = "#{vCmd[0][(vCmd[0].index(/\s/)+1)..100].to_s}"
		 vNmFuncao     = vNmFuncao.gsub("\n", "")
		 vPostString   = {"funcaos": {
			                "nm_funcao": vNmFuncao.downcase, 
					"cd_componente": vComponente.downcase, 
					"tipo": vTipo, 
					"codigo": vComando,
					"cd_empresa": @cd_empresa
					}
				}
		 vPostString  = vPostString.to_json
		 RestClient.post "#{@servidor_funcao}", JSON.parse(vPostString)
		end
  end


	def processar
			v_dia   		= Time.now.strftime("%d%m%Y")

			#@data_ultima_alteracao

			File.open(@nm_arquivo, "r").each_line.with_index do |li, v_count|

				#puts "#{li.split[5]}               #{li.split[6]}	"
				begin
				    v_dia_hora 	= Time.new(li.split[5][4..7], li.split[5][2..3], li.split[5][0..1], li.split[6][0..1], li.split[6][2..3])
				rescue
				    raise "#{li.split[5]}       #{li.split[6]}"
				end

			        if v_dia_hora > @data_ultima_alteracao #Rails.logger.info "Data Ultima Alteracao #{@data_ultima_alteracao}		-		Data Arquivo #{v_dia_hora}"
					Rails.logger.info @nm_arquivo
					if v_count > 0
						if v_dia == li.split[5]
								
								post_arquivo(li.split[7])
						else
								break
						end
					end

                 	       end
                	end
	end



	def post_arquivo(vArquivo)
	
		vTipo 			= ""
		if vArquivo.include?(".cptlst")
			 vTipo        = "Componente"
		elsif vArquivo.include?(".menlst")
			 vTipo        = "Menu"
		elsif vArquivo.include?(".apslst")
			 vTipo        = "StartUpShel"
		end
		
		if vTipo.empty?
			 return nil
		end
		
		vId 			= nome_arquivo(vArquivo)

		RestClient.delete "#{@servidor_http}/#{vId}", {params: 
																						{
																						 nome: vId, 
																						 cd_empresa: @cd_empresa
																						 }
																				}
	
		vCmdActivate 		= []
		vIndica      		= false
		
		vIndicaFuncao   = false
		vCmdFuncao      = []
	
		f = File.read(vArquivo).each_line do |linha|
	
			if linha[0..0] == '['
				v1  	= linha.index("\n")
				if v1.nil?
					 vLinha = linha[26..300]
				else
					v1 	   -= 1
					vLinha 	= linha[26..v1]
				end
	
				if !vLinha.nil? 
						if (!vLinha.match(/^;/) && vLinha.match(/^entry/i)) or vLinha.match(/^operation/i)
							vIndicaFuncao = true
					end
					if vIndicaFuncao
						vLinha2              = vLinha.gsub("\n", "")
						vCmdFuncao 			<< vLinha2
	
						if (!vLinha.match(/endw/i) && 
							!vLinha.match(/endf/i) && 
							!vLinha.match(/endi/i) && 
							!vLinha.match(/endv/i) && 
							!vLinha.match(/endp/i) && !vLinha.nil? && !vLinha.match(/^;/)) & (!!(vLinha.match(/^end\s/i)) or !!(vLinha.match(/^end\;/i)) or !!(vLinha.match(/^end/i)))
							post_funcao(vId, vCmdFuncao)
							vCmdFuncao		= []
							vIndicaFuncao 	= false
						end
					end
				
				
					if vIndica
						vIndica 		= vLinha.match(/\%\\/) ? true : false
						vLinha 			= tratar_linha(vLinha)
						if !vLinha.empty?
							vCmdActivate << vLinha
						else
							 vIndica 		= false
							 vCmdActivate = []
						end
					else
						if vCmdActivate.any?
							vComando     = vCmdActivate.map { |i| i.to_s }.join("")
							vPostString  = {"componentes": {"nome": vId, "linha": vComando, "cd_empresa": @cd_empresa, tipo: vTipo }}
							vPostString  = vPostString.to_json
							RestClient.post "#{@servidor_http}", JSON.parse(vPostString)
					 
							vCmdActivate = []	
							vIndica 	 = false
						end
						
						if !vLinha.nil?
							 if ((vLinha.match(/activate\s.*\".*\"/i) 		or 
								vLinha.match(/newinsntace\s.*\".*\"\,/i) 	or 
								vLinha.match(/new_insntace\s.*\".*\"\,/i) 	or
								vLinha.match(/selectdb\s/i) 				or
								vLinha.match(/sql.*\".*\,\"def\"/i)))
								vIndica 	= vLinha.match(/\%\\/) ? true : false
								if !vIndica 
									if (!vLinha[-1, 1].empty? and vLinha[-1, 1] != ")" and vLinha.length >= 248)
										vIndica = true
									end
								end
	
								vLinha 		= tratar_linha(vLinha)
								if !vLinha.empty?
									vCmdActivate << vLinha
								else
									 vIndica 	= false
									 vCmdActivate = []
								end
							end
						end
					end
					
				end
			end
		end	
		
	end


end
